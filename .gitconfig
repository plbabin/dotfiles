[include]
   path = ~/.gitconfig_aliases

[apply]
    whitespace = nowarn
[core]
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    editor = subl --wait
    pager = most
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    autocrlf = input
    
[alias]
  # One-letter aliases
  a = add --all
  b = branch
  d = diff
  e = !git diff | $EDITOR
  l = log --pretty=oneline -n 20 --graph
  m = merge --no-ff
  p = pull
  u = reset HEAD --
  
  # Simple fairly-frequent aliases.
  au    = add --update .
  ac    = !git add -p; git commit
  co    = checkout
  ci    = commit
  cl    = clone
  ca    = commit --amend
  cp    = cherry-pick # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
  cp-nx = cherry-pick --no-commit -x # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
  st    = status -sb
  br    = branch
  brm   = branch --merged
  brnm  = branch --no-merged
  so    = show --pretty=format: --name-only
  sp    = stash pop
  spf   = !git stash show -p $1 | git apply && git stash drop
  type  = cat-file -t
  dump  = cat-file -p
  amend = commit --amend
  w     = whatchanged

  r   = reset
  r1  = reset HEAD^
  r2  = reset HEAD^^
  rh  = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard

  hist    = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  ls      = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ll      = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lds     = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  me      = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --author=plbabin
  count   = shortlog -sn
  credit  = commit --amend --author "$1 <$2>" -C HEAD 

  stash-all = stash save --include-untracked

  unstage = reset HEAD --
  undo    = reset --soft HEAD^

  pso     = push origin
  plo     = pull origin

  f       = "!git ls-files | grep -i"

  la      = "!git config -l | grep alias | cut -c 7-"
  lt      = describe --tags --abbrev=0
  
  workprofile = config user.email \"pierre-luc.babin@universalmind.com\"
  recap = log --since=\"00:00:00\" --no-merges --oneline --author=plbabin@gmail.com

[mergetool]
    keepBackup = false
[merge]
    conflictstyle = diff3
    tool = diffmerge
[mergetool "diffmerge"]
    cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
    trustExitCode = true

[pull]
  rebase = true
[push]
  default = matching

[help]
	autocorrect = 1

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

[branch]
  autosetupmerge = true

[color]
  branch = auto
  diff = auto
  interactive = auto
  pager = true
  status = auto
  ui = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles
