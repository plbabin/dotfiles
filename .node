# export NVM_DIR="$HOME/.nvm"
# # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

__init-nvm-autoload() {
  autoload -U add-zsh-hook
  load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
        nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
}

# alias loadrvm='[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"'

# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
if [ -s "$HOME/.nvm/nvm.sh" ] && [ ! "$(type __init_nvm)" = function ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
  # declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
  function __init_nvm() {
    echo "Loading NVM..."
    # for i in "${__node_commands[@]}"; do unalias $i; done
    . "$NVM_DIR"/nvm.sh
    # __init-nvm-autoload
    # unset __node_commands
    unset -f __init_nvm
    unalias loadnvm
  }
  alias loadnvm='__init_nvm'
  # for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
fi

# __init-nvm-autoload() {
#   autoload -U add-zsh-hook
#   load-nvmrc() {
#     local node_version="$(nvm version)"
#     local nvmrc_path="$(nvm_find_nvmrc)"

#     if [ -n "$nvmrc_path" ]; then
#       local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

#       if [ "$nvmrc_node_version" = "N/A" ]; then
#         nvm install
#       elif [ "$nvmrc_node_version" != "$node_version" ]; then
#         nvm use
#       fi
#     elif [ "$node_version" != "$(nvm version default)" ]; then
#       echo "Reverting to nvm default version"
#       nvm use default
#     fi
#   }
#   add-zsh-hook chpwd load-nvmrc
#   load-nvmrc
# }

# # Load nvm if present
# export NVM_DIR="$HOME/.nvm"
# if [ -s "$NVM_DIR/nvm.sh" ]; then
#     # Load nvm but don't use it yet: we need to do some other hacks first.
#     # See https://github.com/creationix/nvm/issues/1261#issuecomment-366879288
#     . "$NVM_DIR/nvm.sh" --no-use
#     # I don't need this check, and it's slow (loads npm).
#     # Do not use the npm `prefix` config; do not report related bugs to nvm ;)
#     nvm_die_on_prefix() {
#         return 0
#     }
#     # This also loads npm; let's just skip it.
#     nvm_print_npm_version() {
#         return 0
#     }
#     # nvm_resolve_local_alias can also be slow; cache it.
#     if [ -f "$NVM_DIR/_default_version" ]; then
#         NVM_AUTO_LOAD_VERSION=$(cat "$NVM_DIR/_default_version")
#     fi
#     if [ -z "$NVM_AUTO_LOAD_VERSION" ]; then
#         NVM_AUTO_LOAD_VERSION=$(nvm_resolve_local_alias default)
#     fi
#     if [ -n "$NVM_AUTO_LOAD_VERSION" ]; then
#         echo "$NVM_AUTO_LOAD_VERSION" > "$NVM_DIR/_default_version"
#         nvm use --silent "$NVM_AUTO_LOAD_VERSION"
#     fi

#     __init-nvm-autoload
# fi



